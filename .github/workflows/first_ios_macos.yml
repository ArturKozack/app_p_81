name: Build first ipa MacOs

on:
  push:
    tags:
      - 'ssss'

  workflow_dispatch:

jobs:

  build_ipa:
    runs-on: macos-latest
    permissions:
      contents: write

    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0


    - name: Find current version
      id: version
      uses: "WyriHaximus/github-action-get-previous-tag@v1"
      with:
        fallback: 1.0.0 # Optional fallback tag to use when no tag can be found

    - name: Set version
      run: echo "APP_VERSION=${{ steps.version.outputs.tag }}" >> $GITHUB_ENV

    - name: Set build number
      env:
        RUN_NUMBER: ${{ github.run_number }}
      run: |
        echo "BUILD_NUMBER=$RUN_NUMBER" >> $GITHUB_ENV
  
    # Install the Apple certificate and provisioning profile 
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
        P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
        BUILD_PROVISION_PROFILE_ONESIGNAL_BASE64: ${{ secrets.MOBILEPROVISION_ONESIGNAL_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        PP_ONESIGNAL_PATH=$RUNNER_TEMP/build_one_signal_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
        echo -n "$BUILD_PROVISION_PROFILE_ONESIGNAL_BASE64" | base64 --decode -o $PP_ONESIGNAL_PATH
        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_ONESIGNAL_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    
    - name: Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        flutter-version: 3.22.2
    
    - name: Restore the main dependencies
      run: flutter pub get

    # Build and sign the ipa using a single flutter command
    - name: Building IPA
      run: flutter build ipa --release --obfuscate --split-debug-info=build/debug_info --export-options-plist=ios/ExportOptions.AppStore.plist --build-number "${{ env.BUILD_NUMBER }}" --build-name="${{ env.APP_VERSION }}"

    - name: Copy release files
      run: |
        cp /Users/runner/work/app_p_81/app_p_81/build/ios/ipa/*.ipa ./com.app51.ipa

    - name: Upload iOS app to TestFlight
      uses: apple-actions/upload-testflight-build@v1
      with:
        app-path: ./com.app51.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

    - name: Create GitHub release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "/Users/runner/work/app_p_81/app_p_81/build/ios/ipa/*.ipa"
        name: "${{ env.APP_VERSION }}"
        tag: "${{ env.APP_VERSION }}"
  
    - name: Clean up flutter
      if: ${{ always() }}
      run: flutter clean

    # Important! Cleanup: remove the certificate and provisioning profile from the runner!
    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
